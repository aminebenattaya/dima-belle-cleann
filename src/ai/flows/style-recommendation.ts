// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Provides personalized style recommendations based on user preferences, including specific product suggestions.
 * This flow is designed to be used in a chatbot context.
 *
 * - getStyleRecommendation - A function that takes user preferences and returns style recommendations and product suggestions.
 * - StyleRecommendationInput - The input type for the getStyleRecommendation function.
 * - StyleRecommendationOutput - The return type for the getStyleRecommendation function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import { findMatchingProductsTool } from '@/ai/tools/find-products-tool';
import type { SuggestedProduct } from '@/lib/types';
import { generate } from 'genkit/ai';

// Input is simplified to just a user message for a chat context
const StyleRecommendationInputSchema = z.object({
  message: z.string().describe('The user\'s message or query to the chatbot.'),
});
export type StyleRecommendationInput = z.infer<typeof StyleRecommendationInputSchema>;


// Schema for suggested products (must match the tool's output)
const SuggestedProductSchemaForFlow = z.object({
  id: z.string(),
  name: z.string(),
  imageUrl: z.string(),
  price: z.number(),
  category: z.string(),
  slug: z.string(),
});

const StyleRecommendationOutputSchema = z.object({
  recommendation: z.string().describe('The chatbot\'s response to the user, in French. It should be friendly, expert, and reassuring.'),
  suggestedProducts: z.array(SuggestedProductSchemaForFlow).optional().describe('A list of specific products from Dima Belle that match the user\'s query. This MUST come ONLY from the `findMatchingProductsTool` results. Do not invent products.'),
});
export type StyleRecommendationOutput = z.infer<typeof StyleRecommendationOutputSchema>;


// The function to be called from the UI
export async function getStyleRecommendation(input: StyleRecommendationInput): Promise<StyleRecommendationOutput> {
  // Call the real Genkit flow
  return styleRecommendationFlow(input);
}


// The actual Genkit flow definition
const styleRecommendationFlow = ai.defineFlow(
  {
    name: 'styleRecommendationFlow',
    inputSchema: StyleRecommendationInputSchema,
    outputSchema: StyleRecommendationOutputSchema,
  },
  async (input) : Promise<StyleRecommendationOutput> => {
    
    const llmResponse = await generate({
        model: 'googleai/gemini-2.0-flash',
        prompt: `Tu es un assistant de mode expert et amical pour "Dima Belle", une boutique de mode modeste. Ta tâche est de répondre aux questions des utilisateurs en français, en fournissant des conseils de style pertinents et en suggérant des produits de la boutique lorsque c'est approprié.

CONTEXTE UTILISATEUR :
Un utilisateur a envoyé le message suivant : "${input.message}"

TES INSTRUCTIONS :
1.  **Analyse la demande** : Comprends l'intention de l'utilisateur. Cherche-t-il un conseil général, un produit pour une occasion spécifique (mariage, quotidien), ou des articles basés sur une couleur ou un style ?
2.  **Formule une réponse experte** : Rédige une réponse amicale et rassurante en français. Donne l'impression d'être un styliste personnel.
3.  **Utilise l'outil de recherche de produits** : Si l'utilisateur demande des produits spécifiques (ex: "un hijab pour un mariage", "une abaya bleue", "un turban pour visage rond"), utilise OBLIGATOIREMENT l'outil \`findMatchingProductsTool\` pour trouver des articles pertinents dans la base de données. N'invente JAMAIS de produits.
4.  **Intègre les suggestions** : Si l'outil retourne des produits, incorpore-les naturellement dans ta réponse. Par exemple, "Pour un look élégant, je vous suggère ces articles qui pourraient vous plaire...".
5.  **Gère les cas sans produits** : Si l'outil ne retourne aucun produit ou si la demande est générale, fournis un conseil de style sans suggestion de produit. Par exemple, si l'utilisateur demande "comment assortir les couleurs", donne des conseils généraux.
6.  **Structure la sortie** : Ta réponse finale doit être un objet JSON correspondant au schéma de sortie, avec la réponse textuelle dans le champ \`recommendation\` et les produits trouvés par l'outil dans \`suggestedProducts\`.`,
        tools: [findMatchingProductsTool],
        output: {
          schema: StyleRecommendationOutputSchema,
        },
    });

    const output = llmResponse.output();
    if (!output) {
      throw new Error("La réponse du modèle est vide ou invalide.");
    }
    
    return output;
  }
);